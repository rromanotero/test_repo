# This is a basic workflow that is manually triggered

name: Package Services

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_publish:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TARGET_PLATFORM: linux/arm/v7


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout the code
      uses: actions/checkout@v1
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - name: Docker Login
      if: success()
      run: |
        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
    - name: Detect Services
      if: success()
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: |
        SERVICES_PATH=./services
        OUTPUT_PATH=$runner.temp

        echo "SERVICES_PATH="$SERVICES_PATH
        echo "OUTPUT_PATH="$OUTPUT_PATH
        echo ""

        if [ ! -d $SERVICES_PATH ]; then
          echo "services directory missing: "$SERVICES_PATH
          exit 1
        fi

        services_found=()
        for path in $SERVICES_PATH/*; do
          if [[ -d $path ]]; then
            SERVICE_NAME=$(basename $path)
            SVC_PATH=$SERVICES_PATH/$SERVICE_NAME

            echo "Checking $SVC_PATH"

            if [ ! -f $SVC_PATH/Dockerfile ]; then
              echo "service $SERVICE_NAME is missing its Dockerfile"
              echo "here's the contents of $SVC_PATH"
              ls -l $SVC_PATH
              exit 1
            fi

            echo "found service "$SERVICE_NAME
            services_found+=("$SERVICE_NAME")
          fi
        done

        if [ ${#services_found[@]} -eq 0 ]; then
          echo "no services found in ./services"
          exit 1
        else
          num_of_services_found="${#services_found[@]}"
          echo ""
          echo "found a total of "$num_of_services_found" services"
        fi

        function join_by {
          local d=${1-} f=${2-}; if shift 2; then printf %s "$f" "${@/#/$d}"; fi;
        }

        comma_separated_services_found=$(join_by , "${services_found[@]}")
        echo $comma_separated_services_found

        echo "::set-env name=comma_separated_services_found::$comma_separated_services_found"


    - name: Run Buildx (push image)
      if: success()
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        PROJECT_NAME=${GITHUB_REPOSITORY##*/}
        ACCOUNT_OWNER=$(echo $GITHUB_REPOSITORY | cut -d/ -f1)

        echo "TARGET_PLATFORM="$TARGET_PLATFORM
        echo "GITHUB_REF="$GITHUB_REF
        echo "BRANCH_NAME="$BRANCH_NAME
        echo "GITHUB_SHA="$GITHUB_SHA
        echo "GITHUB_REPOSITORY="$GITHUB_REPOSITORY
        echo "ACCOUNT_OWNER="$ACCOUNT_OWNER
        echo "PROJECT_NAME"=$PROJECT_NAME
        echo "comma_separated_services_found="$comma_separated_services_found

        IFS=',' read -r -a services_found <<< "$comma_separated_services_found"

        for service_name in "${services_found[@]}"
        do
          IMAGE_NAME=$ACCOUNT_OWNER'/'$PROJECT_NAME'_'$service_name:$BRANCH_NAME
          SERVICE_PATH=services/$service_name
          echo '----------------------------------------------------------'
          echo 'Publishing image '$IMAGE_NAME' from path '$SERVICE_PATH
          echo '----------------------------------------------------------'
          cd services/$service_name
          docker buildx build \
            --platform  $TARGET_PLATFORM \
            --tag $IMAGE_NAME \
            --file ./Dockerfile \
            --output type=image,push=true .
          cd ../..
        done
  update_helm_app_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        repository: $GITHUB_REPOSITORY
        ref: $GITHUB_REF
    - name: Git edit
      if: success()
      run: |
